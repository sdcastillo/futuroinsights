image_read("images/regression_metrics.png") %>% image_scale("800")
?AIC
?rmse
library(caret)
?metric
library(mgcv)
library(ggpubr)
sample_size = 3000
tibble(gaussian = rnorm(sample_size),
gamma = rgamma(sample_size, 1, 1/2),
inverse_gaussian = rig(sample_size, 1, 2)) %>%
gather(distribution, values) %>%
ggplot(aes(values)) +
geom_density(fill = "blue", alpha = 0.2) +
facet_wrap(vars(distribution), scales = "free") +
ggtitle("Continuous Distributions") +
xlab("")
library(mgcv)
library(ggpubr)
library(tidyverse)
sample_size = 3000
tibble(gaussian = rnorm(sample_size),
gamma = rgamma(sample_size, 1, 1/2),
inverse_gaussian = rig(sample_size, 1, 2)) %>%
gather(distribution, values) %>%
ggplot(aes(values)) +
geom_density(fill = "blue", alpha = 0.2) +
facet_wrap(vars(distribution), scales = "free") +
ggtitle("Continuous Distributions") +
xlab("")
image_read("images/response_distributions.png") %>% image_scale("800")
tibble(binomial = rbinom(sample_size, 20,0.5),
poisson = rpois(sample_size, 1)) %>%
gather(distribution, values) %>%
ggplot(aes(values)) +
geom_histogram() +
facet_wrap(vars(distribution), scales = "free") +
ggtitle("Discrete Distributions") +
xlab("")
image_read("images/discrete_link_functions.png") %>% image_scale("1200")
library(purrr)
tibble(z = seq(-9, 9, 0.01)) %>%
mutate(
logit = exp(z)/(1 + exp(z)),
probit = map_dbl(z, ~pnorm(.x)),
cauchit = 1/3.14*atan(z) + 1/2,
cloglog = 1 - exp(-exp(z))
) %>%
gather(link_function, mean_response, -z) %>%
geom_line() +
theme_bw() +
xlab("Z = Linear Predictor") +
ylab("Mean of Response")
tibble(z = seq(-9, 9, 0.01)) %>%
mutate(
logit = exp(z)/(1 + exp(z)),
probit = map_dbl(z, ~pnorm(.x)),
cauchit = 1/3.14*atan(z) + 1/2,
cloglog = 1 - exp(-exp(z))
) %>%
gather(link_function, mean_response, -z) %>%
ggplot(aes(z, mean_response, color = link_function)) %>%
geom_line() +
theme_bw() +
xlab("Z = Linear Predictor") +
ylab("Mean of Response")
tibble(z = seq(-9, 9, 0.01)) %>%
mutate(
logit = exp(z)/(1 + exp(z)),
probit = map_dbl(z, ~pnorm(.x)),
cauchit = 1/3.14*atan(z) + 1/2,
cloglog = 1 - exp(-exp(z))
) %>%
gather(link_function, mean_response, -z) %>%
ggplot(aes(z, mean_response, color = link_function)) +
geom_line() +
theme_bw() +
xlab("Z = Linear Predictor") +
ylab("Mean of Response")
tibble(z = seq(-9, 9, 0.01)) %>%
mutate(
logit = exp(z)/(1 + exp(z)),
probit = map_dbl(z, ~pnorm(.x)),
cauchit = 1/3.14*atan(z) + 1/2,
cloglog = 1 - exp(-exp(z))
) %>%
gather(link_function, mean_response, -z) %>%
ggplot(aes(z, mean_response, color = link_function)) +
geom_line() +
theme_bw(legend.position = "top") +
xlab("Z = Linear Predictor") +
ylab("Mean of Response")
tibble(z = seq(-9, 9, 0.01)) %>%
mutate(
logit = exp(z)/(1 + exp(z)),
probit = map_dbl(z, ~pnorm(.x)),
cauchit = 1/3.14*atan(z) + 1/2,
cloglog = 1 - exp(-exp(z))
) %>%
gather(link_function, mean_response, -z) %>%
ggplot(aes(z, mean_response, color = link_function)) +
geom_line() +
theme_bw() +
xlab("Z = Linear Predictor") +
ylab("Mean of Response") +
theme(legend.position = "top")
?BIC
tibble(x = -6:6,y = 1/(1 + exp(6:-6))) %>%
ggplot(aes(x,y)) +
geom_line(color = "red") +
xlab("x") +
ylab("g^-1(x)")
library(ExamPAData)
dim(soa_mortality)
dim(june_pa)
dim(auto_claim)
mean(health_insurance$charges)
getwd()
getwd()
file.path(book_dir,"images/link_functions.pdf")
book_dir <- "C:/Users/sam.castillo/Desktop/PA-MAS-R-Study-Manual"
file.path(book_dir,"images/link_functions.pdf")
R.Version()
install.packages(c("tidyverse", "caret", "broom", "randomForest", "bookdown", "pdp", "rpart", "rpart.plot"))
install.packages("remotes")
# Install remotes if it's not yet installed
# install.packages("remotes")
remotes::install_github("sdcastillo/ExamPAData")
install.packages(c("mgcv", "purrr", "pROC", "ISLR", "glmnet", "dplyr", "scales", "ggpubr", "gbm", "png", "devtools"))
install.packages("tinytex")
tinytex::install_tinytex()
devtools::install_github("hadley/emo")
emo::ji("poop")
emo::ji("ake
emo::ji("cake")
emo::ji("poop")
emo::ji("party")
emo::ji("cake")
emo::ji("relax")
emo::ji("beer")
git push origin master
install.packages("fmsb")
library(ExamPAData)
customer_value
june_pa
readmission
# Install remotes if it's not yet installed
# install.packages("remotes")
remotes::install_github("sdcastillo/ExamPAData")
customer_value
library(ExamPAData)
customer_value
# Install remotes if it's not yet installed
# install.packages("remotes")
remotes::install_github("sdcastillo/ExamPAData")
# Install remotes if it's not yet installed
# install.packages("remotes")
remotes::install_github("sdcastillo/ExamPAData", force = TRUE)
library(ExamPAData)
customer_value
june_pa
.libPaths()
rm(list = ls())
june_pa
june_pa
library(ExamPAData)
# Install remotes if it's not yet installed
# install.packages("remotes")
remotes::install_github("sdcastillo/ExamPAData", force = TRUE)
library(ExamPAData)
june_pa
customer_value
head(health_insurance)
detach(package:plyr)
#detach functions which are from plyr
#An easier alternative is just to restart R
if(any(grepl("package:plyr", search()))) detach("package:plyr") else message("plyr not loaded")
## plyr not loaded
# Library
library(fmsb)
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("this" , "graph" , "looks" , "very" , "cool", "but" , "isn't" , "easy", "to", "read" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
# The default radar chart
radarchart(data)
knitr::include_graphics("images/radar_graph.png")
# Install remotes if it's not yet installed
# install.packages("remotes")
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="false")
remotes::install_github("sdcastillo/ExamPAData", force = TRUE)
health_insurance %>% ggplot(aes(charges)) + geom_histogram()
library(Cairo)
library(tidyverse)
theme_set(theme_bw())
health_insurance %>% ggplot(aes(charges)) + geom_histogram()
library(ExamPAData)
p <- insurance %>% ggplot(aes(claims))
health_insurance %>% ggplot(aes(charges)) + geom_histogram()
set.seed(1)
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
knitr::include_graphics("images/conditional_response.jpg")
knitr::include_graphics("images/regression_metrics.png")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age + sex)
summary(model)
set.seed(1)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
get_mae <- function(y, y_hat){
sqrt(mean(abs(y - y_hat)))
}
get_mae(pred, test$charges)
get_rmse(mean(test$charges), test$charges)
get_mae(mean(test$charges), test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>%
tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
library(mgcv)
sample_size = 3000
tibble(gaussian = rnorm(sample_size),
gamma = rgamma(sample_size, 1, 1/2),
inverse_gaussian = rig(sample_size, 1, 2)) %>%
gather(distribution, values) %>%
ggplot(aes(values)) +
geom_density(fill = "blue", alpha = 0.2) +
facet_wrap(vars(distribution), scales = "free") +
ggtitle("Target Distributions") +
xlab("")
knitr::include_graphics("images/response_distributions.png")
knitr::include_graphics("images/link_functions.png")
knitr::include_graphics("images/discrete_link_functions.png")
library(purrr)
tibble(z = seq(-9, 9, 0.01)) %>%
mutate(
logit = exp(z)/(1 + exp(z)),
probit = map_dbl(z, ~pnorm(.x)),
cauchit = 1/3.14*atan(z) + 1/2,
cloglog = 1 - exp(-exp(z))
) %>%
gather(link_function, mean_target, -z) %>%
ggplot(aes(z, mean_target, color = link_function)) +
geom_line() +
theme_bw() +
xlab("Z = Linear Predictor") +
ylab("Predicted Probability") +
theme(legend.position = "top")
auto_claim %>% count(CLM_FLAG)
set.seed(42)
index <- createDataPartition(y = auto_claim$CLM_FLAG,
p = 0.8, list = F) %>% as.numeric()
auto_claim <- auto_claim %>%
mutate(target = as.factor(ifelse(CLM_FLAG == "Yes", 1,0)))
train <-  auto_claim %>% slice(index)
test <- auto_claim %>% slice(-index)
frequency <- glm(target ~ AGE + GENDER + MARRIED + CAR_USE +
BLUEBOOK + CAR_TYPE + AREA,
data=train,
family = binomial(link="logit"))
frequency %>% summary()
preds <- predict(frequency, newdat=test,type="response")
qplot(preds)
test <- test %>% mutate(pred_zero_one = as.factor(1*(preds>.3)))
summary(test$pred_zero_one)
test %>% summarise(accuracy = mean(pred_zero_one == target))
test %>% summarise(accuracy = mean(0 == target))
test %>%
filter(target == 1) %>%
summarise(accuracy = mean(pred_zero_one == target))
test %>%
filter(target == 0) %>%
summarise(accuracy = mean(pred_zero_one == target))
test <- test %>% mutate(pred_zero_one = as.factor(1*(preds>.6)))
test %>% summarise(accuracy = mean(pred_zero_one == target))
test %>%
filter(target == 1) %>%
summarise(accuracy = mean(pred_zero_one == target))
test %>%
filter(target == 0) %>%
summarise(accuracy = mean(pred_zero_one == target))
confusionMatrix(test$pred_zero_one,factor(test$target))$table
confusionMatrix(test$pred_zero_one,factor(test$target))
library(pROC)
roc(test$target, preds, plot = T)
model = glm(formula = charges ~ age + sex + smoker,
family = Gamma(link = "log"),
data = health_insurance)
model %>% tidy()
plot(model, which = 3)
plot(model, which = 2)
hospital_readmissions
set.seed(1)
library(ggplot2)
theme_set(theme_bw())
library(tidyverse)
tibble(y = rnorm(10, 0, 1),
x = y + 0.4*rnorm(10,0, 1)) %>%
ggplot(aes(x,y)) +
geom_point( show.legend = F) +
geom_smooth(method = "lm", se = F, aes(fill = "linear regression"), color = "red", show.legend = T) +
scale_fill_manual(name="legend", values=c("blue", "red")) +
theme(legend.position = "top")
knitr::include_graphics("images/conditional_response.jpg")
knitr::include_graphics("images/regression_metrics.png")
library(ExamPAData)
library(tidyverse)
model <- lm(data = health_insurance, formula = charges ~ bmi + age + sex)
summary(model)
set.seed(1)
library(caret)
#create a train/test split
index <- createDataPartition(y = health_insurance$charges,
p = 0.8, list = F) %>% as.numeric()
train <-  health_insurance %>% slice(index)
test <- health_insurance %>% slice(-index)
model <- lm(data = train, formula = charges ~ bmi + age)
pred = predict(model, test)
get_rmse <- function(y, y_hat){
sqrt(mean((y - y_hat)^2))
}
get_rmse(pred, test$charges)
get_mae <- function(y, y_hat){
sqrt(mean(abs(y - y_hat)))
}
get_mae(pred, test$charges)
get_rmse(mean(test$charges), test$charges)
get_mae(mean(test$charges), test$charges)
plot(model, which = 1)
plot(model, which = 2)
all_data <- lm(data = health_insurance,
formula = charges ~ bmi + age)
testing <- lm(data = test,
formula = charges ~ bmi + age)
library(broom)
library(kableExtra)
all_data %>%
tidy() %>%
select(term, std.error) %>%
left_join(testing %>% tidy() %>% select(term, std.error), by = "term") %>%
rename(full_data_std_error = std.error.x, test_data_std_error = std.error.y) %>%
mutate_if(is.numeric, ~round(.x, 1)) %>%
kableExtra::kable("markdown")
coefficients(model)
library(mgcv)
sample_size = 3000
tibble(gaussian = rnorm(sample_size),
gamma = rgamma(sample_size, 1, 1/2),
inverse_gaussian = rig(sample_size, 1, 2)) %>%
gather(distribution, values) %>%
ggplot(aes(values)) +
geom_density(fill = "blue", alpha = 0.2) +
facet_wrap(vars(distribution), scales = "free") +
ggtitle("Target Distributions") +
xlab("")
knitr::include_graphics("images/response_distributions.png")
knitr::include_graphics("images/link_functions.png")
knitr::include_graphics("images/discrete_link_functions.png")
library(purrr)
tibble(z = seq(-9, 9, 0.01)) %>%
mutate(
logit = exp(z)/(1 + exp(z)),
probit = map_dbl(z, ~pnorm(.x)),
cauchit = 1/3.14*atan(z) + 1/2,
cloglog = 1 - exp(-exp(z))
) %>%
gather(link_function, mean_target, -z) %>%
ggplot(aes(z, mean_target, color = link_function)) +
geom_line() +
theme_bw() +
xlab("Z = Linear Predictor") +
ylab("Predicted Probability") +
theme(legend.position = "top")
auto_claim %>% count(CLM_FLAG)
set.seed(42)
index <- createDataPartition(y = auto_claim$CLM_FLAG,
p = 0.8, list = F) %>% as.numeric()
auto_claim <- auto_claim %>%
mutate(target = as.factor(ifelse(CLM_FLAG == "Yes", 1,0)))
train <-  auto_claim %>% slice(index)
test <- auto_claim %>% slice(-index)
frequency <- glm(target ~ AGE + GENDER + MARRIED + CAR_USE +
BLUEBOOK + CAR_TYPE + AREA,
data=train,
family = binomial(link="logit"))
frequency %>% summary()
preds <- predict(frequency, newdat=test,type="response")
qplot(preds)
test <- test %>% mutate(pred_zero_one = as.factor(1*(preds>.3)))
summary(test$pred_zero_one)
test %>% summarise(accuracy = mean(pred_zero_one == target))
test %>% summarise(accuracy = mean(0 == target))
test %>%
filter(target == 1) %>%
summarise(accuracy = mean(pred_zero_one == target))
test %>%
filter(target == 0) %>%
summarise(accuracy = mean(pred_zero_one == target))
test <- test %>% mutate(pred_zero_one = as.factor(1*(preds>.6)))
test %>% summarise(accuracy = mean(pred_zero_one == target))
test %>%
filter(target == 1) %>%
summarise(accuracy = mean(pred_zero_one == target))
test %>%
filter(target == 0) %>%
summarise(accuracy = mean(pred_zero_one == target))
confusionMatrix(test$pred_zero_one,factor(test$target))$table
confusionMatrix(test$pred_zero_one,factor(test$target))
library(pROC)
roc(test$target, preds, plot = T)
model = glm(formula = charges ~ age + sex + smoker,
family = Gamma(link = "log"),
data = health_insurance)
model %>% tidy()
plot(model, which = 3)
plot(model, which = 2)
hospital_readmissions
readmission %>% ggplot(aes(LOS)) + geom_histogram()
library(ggpubr)
p1 <- readmission %>% ggplot(aes(LOS)) + geom_histogram()
p2 <- readmission %>% ggplot(aes(log(LOS))) + geom_histogram()
ggarrange(p1,p2)
library(ggpubr)
p1 <- readmission %>% ggplot(aes(LOS)) + geom_histogram() + ggtitle("Without Log Transform")
p2 <- readmission %>% ggplot(aes(log(LOS))) + geom_histogram() + ggtitle("With Log Transform")
ggarrange(p1,p2)
summary(readmission$LOS)
readmission %>% count(LOS)
library(ggpubr)
p1 <- readmission %>% ggplot(aes(LOS)) + geom_histogram() + ggtitle("Without Log Transform")
p2 <- readmission %>% ggplot(aes(log(LOS))) + geom_histogram(bins = 36) + ggtitle("With Log Transform")
ggarrange(p1,p2)
library(ggpubr)
p1 <- readmission %>% ggplot(aes(LOS)) + geom_histogram() + ggtitle("Without Log Transform")
p2 <- readmission %>% ggplot(aes(log(LOS))) + geom_histogram() + ggtitle("With Log Transform")
ggarrange(p1,p2)
library(ggpubr)
p1 <- readmission %>% ggplot(aes(LOS)) + geom_histogram() + ggtitle("Without Log Transform")
p2 <- readmission %>% ggplot(aes(log(LOS))) + geom_histogram() + ggtitle("With Log Transform")
ggarrange(p1,p2)
install.packages(c("backports", "BH", "bookdown", "boot", "broom", "Cairo", "callr", "caret", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "covr", "cowplot", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "DT", "e1071", "ellipsis", "ExamPAData", "fansi", "farver", "fastmap", "forcats", "foreach", "fs", "gbm", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gh", "git2r", "glmnet", "glue", "gower", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "ipred", "iterators", "jsonlite", "kableExtra", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "lifecycle", "lubridate", "magick", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "ModelMetrics", "modelr", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plyr", "prettyunits", "pROC", "processx", "promises", "ps", "R6", "Rcpp", "RCurl", "readr", "recipes", "remotes", "reprex", "reshape2", "rex", "rlang", "rmarkdown", "roxygen2", "rpart.plot", "rprojroot", "rsconnect", "rstudioapi", "rversions", "rvest", "scales", "shape", "shiny", "spatial", "SQUAREM", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "usethis", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2", "yaml"))
library(installr)
bookdown:::serve_book()
install.packages("emo")
bookdown:::serve_book()
bookdown:::serve_book()
install.packages("emo")
devtools::install_github("hadley/emo")
bookdown:::serve_book()
install.packages("kableExtra")
bookdown:::serve_book()
install.packages("Cario")
install.packages("Cairo")
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
getwd()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
bookdown:::serve_book()
